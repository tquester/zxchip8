: main 
		jump start
		
:stringmode tinytext "#/ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789.!?,'- " {
	:byte { 1 * VALUE }
}
		

: tinytext
: enterTheMine  tinytext "Enter the mine#"
: mariowashere2 tinytext "Mario was here!#"
: enterthemine2 tinytext "Well done!/Enter the mine!#"
: whereiseugene tinytext "Where is Eugene?#"
: dontplaywith  tinytext "Do not play with PackMan#"
: thereisfuel   tinytext "Jet set Willy/left some fuel/will we find a/jetpack?#"
: welldone      tinytext "Well done!#"


:calc enterTheMineOfs  { enterTheMine - tinytext }
:calc whereIsEugeneOfs { whereiseugene - tinytext }
:calc enterTheMineOfs2 { enterthemine2 - tinytext }
:calc marioWasHereOfs2 { mariowashere2 - tinytext }
:calc thereisfuelOfs   { thereisfuel - tinytext }
:calc wellDoneOfs      { welldone - tinytext }
:calc dontplaywithOfs  { dontplaywith - tinytext }

:macro Tinytext X Y whereIsEugeneOfs {
    v1 := X
		v2 := Y
		v3 := whereIsEugeneOfs
		drawTinyString
}

:macro DrawTileScene scene {
  startTiles
	loop
	   while v2 < 64
	   i := scene
		 nextTile
	again

}

: drawTitleScene3
  DrawTileScene scene3tiles
	return




#####################################################################################################
## Sprite Animation machine
#####################################################################################################

:alias x v0						
:alias y v1
:alias miny v2
:alias maxy v3
:alias directionX v4
:alias directionY v5
:alias init v6
:alias spriteindex v7
:alias maxSpriteindex v8
:alias minx v9
:alias maxx va
:alias frameDirection vb
:alias input ve		

:macro initsprite _adr _x _y _miny _maxy _dx _dy _first _frame _maxframe _minx _maxx {
          v0 := _x
					v1 := _y
					v2 := _miny
					v3 := _maxy
					v4 := _dx
					v5 := _dy
					v6 := _first
					v7 := _frame
					v8 := _maxframe
					v9 := _minx
					va := _maxx
					vb := 1				
					i := _adr
					save vb
}

:macro initspritei _source _target {
      i := _source
			load vb
			i := _target
			save vb
}


:macro spriteDraw spriteadr {
		i := spriteadr
		vd := spriteindex
		vd += vd # *2
		vd += vd # *4
		ve := vd
		vd += vd # *8
		vd += ve # *12
		i += vd
		sprite v0 v1 12	  
		return
}

:macro spriteInit spriteAdr {
		ve += ve			# *2
		ve += ve		  # *4
		vd := ve	
		ve += ve		  # *8
		ve += vd		  # *10
		i := spriteAdr
		i += ve
		load vb
		init := 0
		i := spriteAdr
		i += ve
		save vb
		return
}

: spriteAnimateCoordinates
		y += directionY
		x += directionX
		if directionY != 0 begin
		    if y > maxy then directionY := -1
		    if y < miny then directionY := 1
		end
		if directionX != 0 begin
		   if x < minx then directionX := 1
		   if x > maxx then directionX := -1
		end
								 # go to next sprite
		spriteindex += frameDirection
		if spriteindex == 255 then reverseFrameDirection
		if spriteindex > maxSpriteindex then reverseFrameDirection
		v6 := 1
   return
: reverseFrameDirection	 
		vf := frameDirection
		frameDirection := 0
		frameDirection -= vf
		spriteindex += frameDirection
		return
		
: spriteAnimationSub		

:macro spriteAnimation1 spriteadr drawfn {
		i := spriteadr
		load	vb			# v0..v7 now contain amoebetrons data
								  # clear amoebetron only if not the first one
		if v6 == 1 then drawfn
									# move and reverse direction
	  spriteAnimateCoordinates		
		drawfn		
		i := spriteadr
		save vb
}



: start
    initfast
    fast
: restart
    hires
    clear 
	  jump Scene1
	 
	 
#########################################################################################################
## Scene 1 Enter the mine.
#########################################################################################################

# tilemap
: scene1tiles

0xfe 9 0x0e 0x0f 0xfe 5
0xfe 9 0x10 0x11 0xfe 5
0xff
0xfe 15 0x04
0xfe 5 0x06 0xfe 5 0x06 0x00 0x00 0x00 0x05
0xfd 16 1
0xff
0xff
0xff

#####################################################################################################
## Draw Scene 1
#####################################################################################################
	
: scene1sprite1
  50 0x11 0x09 0x32 0x00 0x01 0x00 0x00 0x02 0x00  0xff 0x01
: scene1sprite2
  100 0x08 0x09 0x32 0x00 0x01 0x00 0x00 0x02 0x00 0xff 0x01
: Scene1
  decompress1
: Scene1Loop
   clear
	drawTitleScene3
  Tinytext 0 0 enterTheMineOfs
	 initspritei scene1sprite1 spriteData1
	 initspritei scene1sprite2 spriteData2
	 

	   v0 := 1
   v1 := 20
	 v2 := 24
	 v3 := 0
	 v4 := 0
	 i := miner1
	 sprite v1 v2 0
	 i := minerdata
	 save v4
	 v0 := 0
	 i := marioWasHereFlag
	 save v0
	 loop
 	     v0 := 3
			 if v0 key then jump Scene3

	     v0 := 4
			 if v0 key then jump Scene4
	 
	     processKeysMiner
			 if vf == 1 begin
			    i := minerdata
					load v3
					if v1 > 100 then jump Scene2
					if v1 < 60 then jump restart
					if v1 > 86 then jump Scene1Loop
				
					marioWasHere
			 end 
			 spriteAnimation1 spriteData1 drawAmoebetron
			 spriteAnimation1 spriteData2 drawAmoebetron
			 redraw
	  again

	
: drawAmoebetron
    spriteDraw amoebetron0	

#########################################################################################################
## Scene 2 Text: Enter the mine                                                                        ##
#########################################################################################################

: Scene2
	  slow
    clear
		Tinytext 0 5 enterTheMineOfs2
		v0 := key
		clear
		jump Scene3
		
		
		
#########################################################################################################
## Scene 3 Miner Where is Eugenia?                                                                     ##
#########################################################################################################

: scene3tiles
#0x07 0x08 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x0c 0x00 0x00 0x00 0x00 0x00 0x00
#0x09 0x0a 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
#0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
#0x00 0x00 0x06 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x0c
#0x01 0x01 0x01 0x01 0x03 0x00 0x00 0x02 0x02 0x02 0x02 0x02 0x00 0x00 0x02 0x02
#0x01 0x02 0x03 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x04
#0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x06 0x00 0x00 0x00 0x05
#0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x01 0x01 0x01 0x01 0x03

0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00

# tilemap
: scene3tilesOpt
0x07 0x08 0xfe 7 0x0c 0xff
0x09 0x0a 0xff
0xff
0x00 0x00 0x06 0xfe 12  0x0c
0xfd 4 0x01 0x03 0x00 0x00 0xfd 5 0x02 0x00 0x00 0x02 0x02
0x01 0x02 0x03 0xfe 12 0x04
0xfe 11 0x06 0xfe 0x03 0x05
0xfe 11 0xfd 4 1 0x03
# end



# key = 15 03
# fuel = 08 00 / 09 00 / 08 01 / 08 02


:alias xdir v0
:alias x v1
:alias y v2
:alias jumping v3								# 0 = walking, 1..6 jumping 7..12 = falling
:alias iminer v4								# sprite offset 0, 16, 32, 48
:alias x1 v5
:alias y1 v6
: scene3sprite1
#  x   y  miny maaxy dx dy start  frame  maxframe minx maxx
  45  20 9    30    1  0  0       0     6        35    70  1  
: scene3sprite2
	96  8  8    40    0  1  0       0     6        127   0    1 
: Scene3
    decompress3
   	fast
   	clear
 		# DrawTileScene scene3tiles
		drawTitleScene3
		Tinytext 0 58 whereIsEugeneOfs
		#                       x   y  miny maaxy dx dy start  frame  maxframe minx maxx
  	#initsprite spriteData1  45  20 9    30    1  0  0       0     6        35    70    
		#initsprite spriteData2  96  8  8    40    0  1  0       0     6        127   0     
		initspritei scene3sprite1 spriteData1
		initspritei scene3sprite2 spriteData2
   	v1 := 1
	 	v2 := 16
		minerInitDraw

		
	 printTileAddress
	 fast
	 loop
	     processKeysMiner
			 vd := 1
			 if vf == 1  begin
			    i := minerTilePos
					load v2
					if v1 == 13 then jump scene3KeyHit
					if v1 == 9  then jump scene3Key2Hit
					if v1 == 8  then jump scene3Key2Hit					   
					if v1 == 14 begin
					   if v2 == 5 then jump Scene4
					   jump scene3KeyHit
					end
					if v1 == 0 then  jump scene3FuelHit
					i := minerDataStatus
			    load v0
					if v0 != -2 begin
						 if vd == 1 then jump Scene3							# vd = y tile pos, 1 = falling out of screen
				  end
			 end 	 
: scene3cont			 
      minerCheckFalling
			if va == 1 then jump Scene3
			
			spriteAnimation1 spriteData1 drawToilette
    	spriteAnimation1 spriteData2 drawToilette
			redraw
	  again
		
: minerCheckFalling
			getCurrentMinerTile
			va := 0
			v3 := v0
      i := minerDataStatus
			load v0
			if v0 == 0 begin
				if v3 == 0 then minerFalling
			else
			  if v0 == -2 begin
				   if v2 > 7 then va := 1
				   if v3 != 0 then minerStopFalling
			  end
		  end
			return
		
: scene4sprite1
#  x   y  miny maaxy dx dy start  frame  maxframe minx maxx
 60   37   9    38   1  0  0       0     0x02     64    96 1  
: scene4sprite2
 48   0    8    40   0  1  0       0     0x02    0   255   1
: Scene4
   	fast
		decompress4
: Scene4Loop
   	clear
 		#DrawTileScene scene4tiles
		drawTitleScene3
		Tinytext 0 58 dontplaywithOfs
		#                          x   y  miny maaxy dx dy start  frame  maxframe minx maxx
  	#initsprite spriteData1    60   37   9    38   1  0  0       0     0x02     64    96
		#initsprite spriteData2   48   0    8    40   0  1  0       0     0x02    0   255
		initspritei scene4sprite1 spriteData1
		initspritei scene4sprite2 spriteData2
    slow
   	v1 := 1
		minerInitDraw
	
	printTileAddress
	 fast
	 loop
	     processKeysMiner
			 vd := 1
			 if vf == 1  begin
			    i := minerTilePos
					load v2
					if v1 <= 5 then jump scene4cont
						 jump Scene4
					i := minerDataStatus
			    load v0
					if v0 != -2 begin
				  end

			 end 	 
: scene4cont		
      minerCheckFalling
			if va == 1 then jump Scene4Loop
			spriteAnimation1 spriteData1 drawStomper
			spriteAnimation1 spriteData2 drawRobo
			redraw
	  again

: getCurrentMinerTile
	    i := minerTilePos
			load v2
			v2 += 2
#			v1 += 1
			i := scene3tiles
			jump getSceneTile
		  
: drawStomper
		spriteDraw stomper

: drawRobo
		spriteDraw robo		
		
		
: drawToilette
		spriteDraw toilette		
		
: minerFalling
    printTileAddress
    v0 := -2
		i := minerDataStatus
		save v0
		return

: minerStopFalling
	printTileAddress
		i := minerDataStatus
		load v0
		if v0 == -2 begin
    	 v0 := 0
		   i := minerDataStatus
		   save v0
	  end
		return

	
: scene3Key2Hit
	  x := 9
		y := 0
		drawSingleTile
	  jump scene3cont
		
: scene3KeyHit
	  x := 15
		y := 03
		drawSingleTile
	 	jump scene3cont
	 
	 
: scene3FuelHit
  x := 00
	y := 00
  drawSingleTile
	x += 1
  drawSingleTile
	y += 1
	drawSingleTile
  x -= 1
	drawSingleTile
  jump scene3cont
	 

: marioWasHere
    i := marioWasHereFlag
		load v0
		if v0 == 1 then return
		v0 := 1
		i := marioWasHereFlag
		save v0		
		Tinytext 0 5 marioWasHereOfs2
		return
	
#####################################################################################################
## Scene 4
#####################################################################################################

# this is a compress tileset
# all numbers below 0xfc are sprites
# 0xff means fill the line to the end with 0x00
# 0xfe n means fill n bytes with 0
# 0xfd n x means fill n bytes with x

# tilemap
: scene4tilesOpt
0xfe 15 0x04
0xfe 15 0x05
0xfe 0x0d 0x01 0x01 0x01 
0x01 0x02 0x03 0xff
0x00 0x00 0x01 0x02 0x03 0xfe 0x09 0x12 0x13
0xfe 0x04 0x02 0x02 0xfe 0x08 0x14 0x15
0xfe 7 0x02 0x02 0x00 0x00 0xfd 5 1
0xff
#end

#: scene4tiles
#0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x04
#0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x05
#0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
#0x02 0x02 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
#0x00 0x00 0x02 0x02 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
#0x00 0x00 0x00 0x00 0x02 0x02 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
#0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x02 0x02 0x00 0x00 0x01 0x01 0x01 0x01 0x01
#0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00

# Gets the tile at x=v1/y=v2 in v0
# input:
#					i = compressed tile set
#				  v1 = x coordinate
#				  v2 = y coordinate
# output  v0 = tile
# destroys
#					v3, v4, v5, v6


: tileAt
  v3 := 1									# y there are 8 lines
	v4 := 0								  # x = 0
	loop while v3 <= 8
	   load v0
		 if v0 == 0xff begin 
		    if v1 == v3 then jump tileAtIs0
		    v4 := 0
		    v3 += 1
				jump tileAtContinue
		 end
		 if v0 == 0xfe begin
		    load v0
			  v4 += v0
				if v2 == v3 begin
				   if v1 < v4 then jump tileAtIs0
			  end
		end
		if vd == 0xfd begin
		   load v0
			 v4 += v0
			 load v0
				if v2 == v3 begin
				   if v1 < v4 then jump tileAtIsV0
			  end
		end
		if v2 == v3 begin
		   if v1 == v4 then jump tileAtIsV0
	  end
		v3 += 1
		if v3 == 15 begin
		   v3 := 0
			 v4 := 1
	  end
: tileAtContinue
   again
: tileAtIs0
		v0 := 0
: tileAtIsV0
    return
			 
				
				
		  
		    

		    
	   


: decompressStart
  v1 := 0									# source ptr
	v2 := 0									# dest ptr
	v3 := 0									# line 0..7
	v4 := 0									# byte in line counter 0..15
  return

: decompress1  												# v0 = char
	decompressStart
	loop while v3 < 9
		 i := scene1tiles
  	 decompressByte
   again
	return

: decompress3  												# v0 = char
	decompressStart
	loop while v3 < 9
		 i := scene3tilesOpt
  	 decompressByte
   again
	return

: decompress4  												# v0 = char
	decompressStart
	loop while v3 < 9
		 i := scene4tilesOpt
  	 decompressByte
   again
	return
	
: decompressByteCheckNewLine
		if v4 == 16 begin
			v4 := 0
			v3 += 1
		end
	 return
	
: decompressByteWrite
		i := scene3tiles
		i += v2
		save v0
		v2 += 1
		v4 += 1
		return
		
: decompressCopyBytes
	loop while v6 > 0
		decompressByteWrite
		decompressByteCheckNewLine
		v6 -= 1
	again
	return
: decompressByte
		 i += v1
		 load v0
 		 v1 += 1
		 
		 if v0 == 0xff begin
		    v0 := 0
		    loop while v4 < 16
				   decompressByteWrite
		    again
				v3 += 1
				v4 := 0
				return
		 end
		  if v0 == 0xfe begin
			    load v0
					v6 := v0
					v1 += 1
					v0 := 0
					jump decompressCopyBytes
			end
	   if v0 == 0xfd begin
			    load v0
					v6 := v0
					load v0
					v1 += 2
					jump decompressCopyBytes
		 end
		 decompressByteWrite
		 decompressByteCheckNewLine
		return

	

#####################################################################################################
## Miner willy animation                                                                            
#####################################################################################################

: minerInitDraw
	  v0 := 1
	 	v3 := 0
	 	v4 := 0
	 	i := miner1	
	  sprite v1 v2 0	 
	  i := minerdata
	  save v4	 
		return
		
: minerPrep1
		i := minersavedata
		save v4 
		i := minerdata
		load v4
		drawMiner
		return
		
: minerPrep2
		drawMiner
		i := minerdata
		save v4
		i := minersavedata
		load v4
		return


: minerLeft
    minerPrep1
		xdir := 1
		jump minerPrep2

: minerRight
    minerPrep1
		xdir := -1
		jump minerPrep2

: minerJump
   printTileAddress
	  minerPrep1
		if jumping == 0 then jumping := 1
		jump minerPrep2

: minerCheckJump
		i := minersavedata
		save v4 
		i := minerdata
		load v4
		if jumping != 0 then moveMiner
		i := minersavedata
		load v4
		return		

: drawMiner		
  	i := miner1
		if xdir == -1 then i := minerr1
		i += iminer
		sprite x y 0
	 return
	 
	 
#####################################################################################################
## Move Miner
#####################################################################################################

# returns v1 = x tile 
#         v2 = y tile
: minerTileAddress
		i := minerdata
		load v2
		x += 4
		x >>= x
		x >>= x
		x >>= x
		y >>= y
		y >>= y
		y >>= y
	  i := minerTilePos
	  save v2		
		return
		
: bcdbuf	0x00 0x00 0x00	
	 
: printsave
   0x00 0x00 0x00 0x00  0x00 0x00 0x00 0x00  0x00 0x00 0x00 0x00  0x00 0x00 0x00 0x00 

: printdez1
	 i := bcdbuf
	 i += v5
	 v5 += 1
	 load v0
	 i := hex v0
	 sprite v3 v4 5
	 v3 += 6
	 return

: printdez
   i := bcdbuf
	 bcd v0
	 v5 := 0
	 printdez1
	 printdez1
	 printdez1
	 return 
	 
: printTileAddress
   return
   i := printsave
	 save vf
   minerTileAddress
	 
	 v0 := x
	 v3 := 0
	 v4 := 0
	
	 printdez
	 
	 v3 += 8
   minerTileAddress
	 
	 v0 := y
	 printdez
	 
	 getCurrentMinerTile
	 v3 += 8
	 printdez

	 i := printsave
	 load vf
	 return

: moveMiner
# -1 backward 1 forward

#		i := minersavedata
#		save v4 
    
		i := minerdata
		load v4
		if jumping == 0 then printTileAddress
		# delete miner from screen
		i := miner1
		if xdir == -1 then i := minerr1
		i += iminer
		x1 := x
		y1 := y
		iminer += 32
		if iminer == 160 then iminer := 0
		x += xdir
		if x == 255 then x := 0
		if x > 116 then x := 116
		if jumping == -2 begin
				y += 1
				x -= xdir
				iminer := 0
		else
			if jumping > 0 begin
				 if jumping < 15 begin
						y -= 1
					else
						y += 1
				 end
				 jumping += 1
				 if jumping == 29 then jumping := 0
			end
		end
		sprite x1 y1 0
		drawMiner
		i := minerdata
		save v4
		if jumping == 0 then printTileAddress
		return
		
		
#####################################################################################################
## Central Miner Key processing
#####################################################################################################

: minerTilePos
0x00 0x00 0x00


: processKeysMiner
	v1 := 0
	v0 := 9
	if v0 key begin
		minerLeft
		v1 := 1
	end
	v0 := 7
	if v0 key begin
	minerRight
	v1 := 1
	end
	v0 := 5
	if v0 key then minerJump
	vf := 0
	if v1 == 1 begin
			moveMiner
		else
			minerCheckJump
	end
	vd := vf
	minerTileAddress
	i := minerTilePos
	save v2
	vf := vd
	
	return

:alias x v1
:alias y v2
:alias xd v3
:alias yd v4
:alias count v7

#####################################################################################################
## Draw tiles
#####################################################################################################

# input 	v1 = x
#       	v2 = y
# output	v0 = tile

: getSceneTile
   v0 := v2				# temp v0
	 v0x8
	 v0 += v0				# * 16
	 v0 += v1				# add x
	 i := scene3tiles
	 i += v0
	 load v0
	 return


 
: startTiles
  x := 0
	y := 0
	v3 := 0
	v4 := 15
	return
	
: nextTile
 i += v3
 load v0
		if v0 != 0 begin
			 v0 -= 1
			 v0x8
			 i := scenesprites
			 i += v0
			 sprite v1 v2 8
		end
		v1 += 8
		if v3 == v4 begin
			 v4 += 16
			 v1 := 0
			 v2 += 8
		end
		v3 += 1
	return
	
# i = tiles scene
# v1 = x in tiles
# v2 = y in tiles
: drawSingleTile
  i := scene3tiles
  v3 := v2
	v3 += v3  # * 2
	v3 += v3  # * 4
	v3 += v3  # * 8
	v3 += v3  # * 16
	v3 += v1
	i += v3
	load v0
	i := scenesprites
	if v0 == 0 then return
	v0 -= 1
	v0x8
	i += v0
	v4 := v1
	v5 := v2
	v4 += v4
	v4 += v4 
	v4 += v4
	v5 += v5
	v5 += v5 
	v5 += v5
	sprite v4 v5 8
	return
  

#####################################################################################################
## Tools
#####################################################################################################
	
: v0x8
  v0 += v0
: v0x4
  v0 += v0
  v0 += v0
	return


		

		

		
#####################################################################################################
## Text drawing
#####################################################################################################
		
	 
: drawTinyLetter2
   if v0 == 1 begin
	    v1 := 0
			v2 += 6
			return
	 end
	 v0 -= 2
   i := tinyA
	 if v0 > 30 begin	  # If letter is to big calculation will not fit in 8bit
	    v4 := 150
	    i += v4			# 50 * 5. 
			v0 -= 30
	 end
	 v4 := v0
	 v0x4
	 v0 += v4				# * 5
	 i += v0
	 sprite v1 v2 5
	 v1 += 5
	 return
	 
	 
: drawTinyString	 
	 loop 
	    i := tinytext
			i += v3
			load v0
				while v0 != 0
				drawTinyLetter2
				v3 += 1
	 again
	 return
	 
#####################################################################################################
## Init ZX Spectrum specitic Opcodes
## The ZX Emulator stores the bytes "ZX" in memory lodation 0 and 1
## Double buffereing is done with three commands
## 0xF0E0 = Fast - Disable all Screen drawing (like in ZX81)
## 0xF1E0 = Slow - Back to normal. All sprites are drawn
## 0xF2E0 = Update - Force Screen update in fast mode
##
## Now we can re-arrange the scene, move all sprites etc. then call redraw to force a redraw.
## Flickering is impossible because you never see a sprite beeing removed
#####################################################################################################
	 
			
			
: initfast
  i := 0
	load v1
	if v0 == 90 begin
	   if v1 == 88 begin
		    v0 := 0xF0
				v1 := 0xE0
				i := fast
				save v1
				v0 := 0xF1
				i := slow
				save v1
				v0 := 0xf2
				i := redraw
				save v1
				
				
		 end
  end
	return
		
: fast
   return 
	 return
	 
: slow
   return 
	 return

: redraw
   return
	 return
	 
	 


: text2 # offset 40

: scenedata
0x00

: marioWasHereFlag
0x00
: minerdata
0x00 			# xdir			v0
0x00 			# x					v1
0x00		  # y					v2
: minerDataStatus
0x00      # jumping		v3					0 = walking, 1 = jumping, 2 = falling
0x00 			# iminer		v4
0x00      
: minersavedata
0x00 0x00 0x00 0x00 0x00

: dot
0x01



# Amoebetrons move up and down
# each data = 6 bytes
: spriteData1
50    # x pos 																		v0
0x11 		# y pos																		v1
0x09 	  # min y																	  v2	
0x32		# max x																	  v3
0x00		# direction x															v4
0x01		# direction															  v5
0x00		# 00 = draw first sprite									v6
0x00		# sprite index													  v7
0x02    # max sprite index												v8
0x00		# min x																	  v9
0xff    # max x																	  va
0x01    # frame direction													vb


: spriteData2
100		# x pos 																		v0
0x08	# y pos																			v1
0x09 	  # min y																    v2
0x32		# max y																	  v3
0x00		# directionx														  v4	
0x01		# directiony															v5
0x00		# 00 = draw first sprite									v6
0x00		# sprite index													  v7
0x02    # max sprite index												v8
0x00		# min x																		v9
0xff    # max x																	  va
0x01		# padding																	vb


# tiles: 8x8
: scenesprites
: street
0xAA 0x55 0xFF 0xFF 0x00 0x00 0x00 0x00			#01	street
: streetSolid
0xFF 0xFF 0xFF 0xFF 0x00 0x00 0x00 0x00 		#02 street solid
: streetChess
0x55 0xAA 0x55 0xAA 0x00 0x00 0x00 0x00     #03 street chess
: door1
0x00 0x00 0x1F 0x10 0x10 0x10 0x10 0x10			#04 door 1
: door2
0x10 0x1C 0x14 0x10 0x10 0x10 0x10 0x1F			#05 door 2
0x00 0x00 0x00 0x00 0x92 0x54 0x28 0x10     #06 plant
0x00 0x00 0x00 0x00 0x00 0x00 0xff 0x80			#07 fuel1
0x00 0x00 0x00 0x00 0x00 0x00 0xff 0x01     #08 fuel1
0xb5 0xa5 0xb5 0xa5 0xa7 0x80 0xff 0x00     #09 fuel1
0x69 0x49 0x69 0x49 0x6d 0x01 0xff 0x00     #0a fuel1
0x81 0x42 0x24 0x18 0x18 0x24 0x42 0x81     #0b star
0x00 0x00 0xC0 0xC2 0xC5 0xFD 0x05 0x02     #0c key
0x00 0x00 0x00 0x22 0x22 0x2A 0x2A 0x2A     #0d gras
0x1f 0x20 0x7f 0x79 0x76 0x7f 0x7e 0x7d		  #0e box1
0xfe 0x06 0xfa 0xfa 0xfa 0x7a 0xfa 0xfa     #0f box2
0x7d 0x7f 0x7d 0x7f 0x00 0x00 0x00 0x00     #10 box3
0xfa 0xfa 0xfc 0xf8 0x00 0x00 0x00 0x00     #11 box4
0x01 0x03 0x03 0x07 0x07 0x07 0x07 0x07			#12 rocket top left
0x00 0x80 0x80 0xc0 0xc0 0xc0 0xc0 0xc0			#13 rocket top right
0x07 0x07 0x06 0x0c 0x0c 0x18 0x18 0x18			#14 rocket bottom left
0xc0 0xc0 0xc0 0x60 0x70 0x30 0x30 0x30			#15 rocket bottom right




# sprite: 8x12
: amoebetron0
0x00 0x00 0x12 0x6D 0xC9 0xF2 0xBC 0xB8 0x58 0x14 0x14 0x24 
: amoebetron1
0x00 0x00 0x00 0x6C 0x49 0x72 0xBC 0xB8 0x58 0x14 0x14 0x24 
: amoebetron2
0x00 0x00 0xC8 0x48 0x48 0x70 0x3C 0x3A 0x58 0x54 0x92 0x10 

: toilette
0x01 0x01 0x01 0x01 0xFD 0xFF 0xFC 0x76 0x79 0x39 0x39 0x00 
0x04 0x04 0x02 0x02 0xFD 0xFF 0xFC 0x76 0x79 0x39 0x39 0x00 
0x10 0x08 0x04 0x02 0xFD 0xFF 0xFC 0x76 0x79 0x39 0x39 0x00 
0xC0 0x30 0x0C 0x02 0xFD 0xFF 0xFC 0x76 0x79 0x39 0x39 0x00 
0x00 0xE0 0x1C 0x02 0xFD 0xFF 0xFC 0x76 0x79 0x39 0x39 0x00 
0x00 0x00 0xE0 0x1E 0xFD 0xFF 0xFC 0x76 0x79 0x39 0x39 0x00 
0x00 0x00 0x00 0xFE 0xFD 0xFF 0xFC 0x76 0x79 0x39 0x39 0x00 
#0x00 0x00 0xE0 0x1E 0xFD 0xFF 0xFC 0x76 0x79 0x39 0x39 0x00 
#0x00 0xE0 0x1C 0x02 0xFD 0xFF 0xFC 0x76 0x79 0x39 0x39 0x00 
#0xC0 0x30 0x0C 0x02 0xFD 0xFF 0xFC 0x76 0x79 0x39 0x39 0x00 
#0x10 0x08 0x04 0x02 0xFD 0xFF 0xFC 0x76 0x79 0x39 0x39 0x00 
#0x04 0x04 0x02 0x02 0xFD 0xFF 0xFC 0x76 0x79 0x39 0x39 0x00 

: stomper
0x00 0x38 0x74 0xFE 0xE0 0xE0 0xFE 0x7E 0x28 0x28 0x28 0x7E 
0x00 0x38 0x74 0xFE 0xE0 0xFC 0xFE 0x7E 0x28 0x28 0x7E 0x00 
0x00 0x38 0x74 0xFE 0xF8 0xFC 0xFE 0x7E 0x28 0x7E 0x00 0x00 
#0x00 0x38 0x74 0xFE 0xE0 0xFC 0xFE 0x7E 0x28 0x28 0x7E 0x00 
#0x00 0x38 0x74 0xFE 0xE0 0xE0 0xFE 0x7E 0x28 0x28 0x28 0x7E 

: robo
0x38 0x6A 0x7E 0x3E 0x12 0xB8 0xB8 0xFC 0xA0 0xBC 0x38 0x18 
0x38 0x6A 0x7E 0x3E 0x12 0x38 0xB8 0xFC 0xA0 0x3C 0x38 0x18 
0x38 0x6A 0x7E 0x3E 0x12 0x38 0x38 0xFC 0x30 0x3C 0x38 0x18 
#0x38 0x6A 0x7E 0x3E 0x12 0x38 0xB8 0xFC 0xA0 0x3C 0x38 0x18 


# sprite: 16x16
:  miner1
0x03 0x00 0x1f 0x00 0x3e 0x00 0x1a 0x00 0x1f 0x00 0x1e 0x00 0x0c 0x00 0x1e 0x00 
0x3f 0x00 0x3f 0x00 0x7b 0x80 0x7d 0x80 0x1e 0x00 0x3b 0x00 0x37 0x00 0x3b 0x80 
:  miner2
0x03 0x00 0x1f 0x00 0x3e 0x00 0x1a 0x00 0x1f 0x00 0x1e 0x00 0x0c 0x00 0x1e 0x00 
0x37 0x00 0x37 0x00 0x37 0x00 0x3b 0x00 0x1e 0x00 0x0c 0x00 0x0c 0x00 0x0e 0x00 
:  miner3
0x03 0x00 0x1f 0x00 0x3e 0x00 0x1a 0x00 0x1f 0x00 0x1e 0x00 0x0c 0x00 0x1e 0x00 
0x3f 0x00 0x3f 0x00 0x7b 0x80 0x7d 0x80 0x1e 0x00 0x3b 0x00 0x37 0x00 0x3b 0x80 
:  miner4:
0x03 0x00 0x1f 0x00 0x3e 0x00 0x1a 0x00 0x1f 0x00 0x1e 0x00 0x0c 0x00 0x1e 0x00 
0x3f 0x00 0x7f 0x80 0xff 0xc0 0xde 0xc0 0x1f 0x00 0x3b 0x40 0x61 0xc0 0x71 0x80 
:  miner5
0x03 0x00 0x1f 0x00 0x3e 0x00 0x1a 0x00 0x1f 0x00 0x1e 0x00 0x0c 0x00 0x1e 0x00 
0x37 0x00 0x37 0x00 0x37 0x00 0x3b 0x00 0x1e 0x00 0x0c 0x00 0x0c 0x00 0x0e 0x00 
:  minerr1
0x30 0x00 0x3e 0x00 0x1f 0x00 0x16 0x00 0x3e 0x00 0x1e 0x00 0x0c 0x00 0x1e 0x00 
0x3f 0x00 0x3f 0x00 0x77 0x80 0x6f 0x80 0x1e 0x00 0x37 0x00 0x3b 0x00 0x77 0x00 
:  minerr2
0x30 0x00 0x3e 0x00 0x1f 0x00 0x16 0x00 0x3e 0x00 0x1e 0x00 0x0c 0x00 0x1e 0x00 
0x3b 0x00 0x3b 0x00 0x3b 0x00 0x37 0x00 0x1e 0x00 0x0c 0x00 0x0c 0x00 0x1c 0x00 
:  minerr3
0x30 0x00 0x3e 0x00 0x1f 0x00 0x16 0x00 0x3e 0x00 0x1e 0x00 0x0c 0x00 0x1e 0x00 
0x3f 0x00 0x3f 0x00 0x77 0x80 0x6f 0x80 0x1e 0x00 0x37 0x00 0x3b 0x00 0x77 0x00 
:  minerr4
0x30 0x00 0x3e 0x00 0x1f 0x00 0x16 0x00 0x3e 0x00 0x1e 0x00 0x0c 0x00 0x1e 0x00 
0x3f 0x00 0x7f 0x80 0xff 0xc0 0xde 0xc0 0x3e 0x00 0xb7 0x00 0xe1 0x80 0x63 0x80 
:  minerr5
0x30 0x00 0x3e 0x00 0x1f 0x00 0x16 0x00 0x3e 0x00 0x1e 0x00 0x0c 0x00 0x1e 0x00 
0x3b 0x00 0x3b 0x00 0x3b 0x00 0x37 0x00 0x1e 0x00 0x0c 0x00 0x0c 0x00 0x1c 0x00 


# sprite: 8x5
: tinyA
	0xE0 0xA0 0xE0 0xA0 0xA0 # A
	0xE0 0xA0 0xC0 0xA0 0xE0 # B
	0x60 0x80 0x80 0x80 0x60 # C
	0xC0 0xA0 0xA0 0xA0 0xE0 # D
	0xE0 0x80 0xC0 0x80 0xE0 # E
	0xE0 0x80 0xC0 0x80 0x80 # F
	0x60 0x80 0x80 0xA0 0xE0 # G
	0xA0 0xA0 0xE0 0xA0 0xA0 # H
	0xE0 0x40 0x40 0x40 0xE0 # I
	0xE0 0x40 0x40 0x40 0xC0 # J
	0xA0 0xA0 0xC0 0xA0 0xA0 # K
	0x80 0x80 0x80 0x80 0xE0 # L
	0xE0 0xE0 0xA0 0xA0 0xA0 # M
	0xC0 0xA0 0xA0 0xA0 0xA0 # N
	0x60 0xA0 0xA0 0xA0 0xC0 # O
	0xE0 0xA0 0xE0 0x80 0x80 # P
	0x40 0xA0 0xA0 0xC0 0x60 # Q
	0xE0 0xA0 0xC0 0xA0 0xA0 # R
	0x60 0x80 0xE0 0x20 0xC0 # S
	0xE0 0x40 0x40 0x40 0x40 # T
	0xA0 0xA0 0xA0 0xA0 0x60 # U
	0xA0 0xA0 0xA0 0xE0 0x40 # V
	0xA0 0xA0 0xA0 0xE0 0xE0 # W
	0xA0 0xA0 0x40 0xA0 0xA0 # X
	0xA0 0xA0 0xE0 0x20 0xE0 # Y
	0xE0 0x20 0x40 0x80 0xE0 # Z
: tinySmallA
	0x00 0xE0 0xA0 0xE0 0xA0 # a
	0x00 0xC0 0xE0 0xA0 0xE0 # b
	0x00 0xE0 0x80 0x80 0xE0 # c
	0x00 0xC0 0xA0 0xA0 0xC0 # d
	0x00 0xE0 0xC0 0x80 0xE0 # e
	0x00 0xE0 0xC0 0x80 0x80 # f
	0x00 0xE0 0x80 0xA0 0xE0 # g
	0x00 0xA0 0xA0 0xE0 0xA0 # h
	0x00 0xE0 0x40 0x40 0xE0 # i
	0x00 0xE0 0x40 0x40 0xC0 # j
	0x00 0xA0 0xC0 0xA0 0xA0 # k
	0x00 0x80 0x80 0x80 0xE0 # l
	0x00 0xE0 0xE0 0xA0 0xA0 # m
	0x00 0xC0 0xA0 0xA0 0xA0 # n
	0x00 0x60 0xA0 0xA0 0xC0 # o
	0x00 0xE0 0xA0 0xE0 0x80 # p
	0x00 0x40 0xA0 0xC0 0x60 # q
	0x00 0xE0 0xA0 0xC0 0xA0 # r
	0x00 0x60 0x80 0x20 0xC0 # s
	0x00 0xE0 0x40 0x40 0x40 # t
	0x00 0xA0 0xA0 0xA0 0x60 # u
	0x00 0xA0 0xA0 0xE0 0x40 # v
	0x00 0xA0 0xA0 0xE0 0xE0 # w
	0x00 0xA0 0x40 0xA0 0xA0 # x
	0x00 0xA0 0xE0 0x20 0xE0 # y
	0x00 0xE0 0x20 0x80 0xE0 # z





